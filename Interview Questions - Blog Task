1. What are some differences between interfaces and types in TypeScript?

Ans:----

Interfaces: Support declaration merging. If you declare multiple interfaces with the same name in the same scope, the compiler merges their declarations into a single interface. This can be useful for augmenting existing libraries or adding properties across different parts of your code.
Types: Do not support declaration merging. If you try to declare two type aliases with the same name, you'll get a compiler error.
Types: Are more versatile and can be used to define aliases for primitives, unions, intersections, tuples, and more complex types.
Interfaces: Primarily describe the shape of objects. While they can extend other interfaces and types, they are less flexible in representing non-object types directly.
TypeScript

extends vs. & (Intersection):

Interfaces: Use the extends keyword to inherit from other interfaces and types.
Types: Use the intersection operator (&) to combine multiple types.
Implements:Both interfaces and type aliases (when they describe object types) can be used with the implements keyword by classes. However, you cannot implement a union type alias.

Use interface when you primarily need to define the shape of an object and might benefit from declaration merging.
Use type for everything else, especially when you need to alias primitives, unions, intersections, or tuples. type tends to be more flexible overall.
The TypeScript documentation suggests preferring interface when defining object types because TypeScript generally gives better error messages when working with interfaces. However, many developers prefer to default to type for its versatility.

5.What is type inference in TypeScript? Why is it helpful?

Ans:---

Type inference is the ability of the TypeScript compiler to automatically deduce the type of a variable or expression when you don't explicitly specify it. TypeScript looks at the context in which a variable is declared and initialized (or how a function is defined and used) to figure out its type.
 we didn't explicitly write : string, : number, : boolean, or specify the return type of the add function or the type of elements in the numbers array. TypeScript was smart enough to figure out the types based on the values assigned or the structure of the code.

Why is Type Inference Helpful?

Reduces Boilerplate: It allows you to write less code by omitting explicit type annotations where they are obvious. This can make your code cleaner and more concise, especially for simple variable declarations and function return types.
Improves Readability: Less type annotation can sometimes make the core logic of your code stand out more clearly, without being cluttered by explicit type declarations.
Maintains Type Safety: Even though you're not explicitly writing the types, TypeScript still performs static type checking based on the inferred types. This means you still get the benefits of type safety, such as catching type-related errors during development rather than at runtime.
Facilitates Rapid Prototyping: When you're initially sketching out code or experimenting, relying on type inference can speed up the process by allowing you to focus on the logic first and add explicit types later if needed for clarity or more complex scenarios.
type inference aims to strike a balance between explicitness and conciseness, allowing you to benefit from static typing without having to annotate every single thing. TypeScript does a good job of inferring types in many common situations, making the development experience smoother. However, there are cases where explicit type annotations are still necessary or beneficial for clarity and to guide the compiler.
